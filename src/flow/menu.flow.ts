import { addKeyword } from "@builderbot/bot";
import { BaileysProvider } from "@builderbot/provider-baileys";
import { MysqlAdapter } from "@builderbot/database-mysql";
import { typing } from "../utils/presence";
import fs from "fs";
import path from "path";

// Helper para logs
const logDebug = (message: string) => {
  console.log(`[MENU] ${message}`);
  try {
    const logPath = path.join(process.cwd(), "logs", "flow_debug.log");
    fs.appendFileSync(
      logPath,
      `[${new Date().toISOString()}] [MENU] ${message}\n`
    );
  } catch (error) {
    console.error("Error escribiendo log:", error);
  }
};

export const menuFlow = addKeyword<BaileysProvider, MysqlAdapter>([
  "menu",
  "men√∫",
  "MENU",
  "MEN√ö",
  "volver",
  "VOLVER",
  "opciones",
  "ayuda",
  "help",
]).addAction(async (ctx, { flowDynamic, provider, state }) => {
  await typing(ctx, provider);

  // Obtener estado actual para diagnosticar
  const currentFlow = await state.get("currentFlow");
  const blockedForOtherFlows = await state.get("blockedForOtherFlows");
  const esperandoSeleccionCliente = await state.get(
    "esperandoSeleccionCliente"
  );

  logDebug(
    `Men√∫ iniciado. Estado actual - Flujo: ${currentFlow}, Bloqueado: ${blockedForOtherFlows}, EsperandoSelecci√≥n: ${esperandoSeleccionCliente}`
  );

  // Resetear todos los estados de control de flujos
  await state.update({
    currentFlow: "menu",
    blockedForOtherFlows: false,
    esperandoInput: false,
    esperandoSeleccionCliente: false,
    esperandoEmpresaSeleccion: false,
  });

  const menuOptions = [
    "üìä *MEN√ö PRINCIPAL*",
    "",
    "1 Metas del mes",
    "2 Datos de ventas recientes",
    "3 An√°lisis de clientes importantes",
    "4 Productos destacados",
    "5 Inventario en tr√°nsito",
    "6 L√≠mites de cr√©dito disponibles",
    "7 Estado de cuenta",
    "8 Cuentas por cobrar",
    "",
    "Escribe el n√∫mero de la opci√≥n o puedes preguntarme directamente lo que necesites.",
  ].join("\n");

  logDebug("Mostrando men√∫ principal");
  await flowDynamic(menuOptions);
});
