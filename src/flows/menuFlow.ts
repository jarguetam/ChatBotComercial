import { addKeyword } from "@builderbot/bot";
import { BaileysProvider as Provider } from "@builderbot/provider-baileys";
import { MysqlAdapter as Database } from "@builderbot/database-mysql";
import { typing } from "../utils/presence";
import { geminiAgent } from "./geminiAgent";
import { flowOrchestrator } from "./flowOrchestrator";
import fs from "fs";
import path from "path";

// Helper para logs
const logDebug = (message: string) => {
  console.log(`[MENU] ${message}`);
  try {
    const logPath = path.join(process.cwd(), "logs", "flow_debug.log");
    fs.appendFileSync(logPath, `[${new Date().toISOString()}] [MENU] ${message}\n`);
  } catch (error) {
    console.error("Error escribiendo log:", error);
  }
};

export const menuFlow = addKeyword<Provider, Database>([
  "menu",
  "men√∫",
  "MENU",
  "MEN√ö",
  "volver",
  "VOLVER",
  "hola",
  "ayuda",
  "help",
])
  .addAction(async (ctx, { flowDynamic, state, provider }) => {
    // Verificar si ya se mostr√≥ un mensaje de bienvenida (viene de welcomeFlow)
    const welcomeShown = await state.get("welcomeShown");
    
    // Establecer el flujo actual como menu
    await state.update({ 
      currentFlow: "menu",
      esperandoInput: false,
      esperandoSeleccionCliente: false,
      esperandoEmpresaSeleccion: false,
      blockedForOtherFlows: false
    });
    
    logDebug(`Iniciando flujo de men√∫, welcomeShown: ${welcomeShown}`);

    // Solo mostrar el mensaje de bienvenida si no viene de welcomeFlow
    if (!welcomeShown) {
      await typing(ctx, provider);
      await flowDynamic(
        [
          "üëã *¬°Bienvenido al Asistente Comercial Inteligente!*",
          "",
          "Soy tu asistente virtual y puedo ayudarte con informaci√≥n sobre:",
          "",
          "‚Ä¢ Metas mensuales",
          "‚Ä¢ Datos de ventas recientes",
          "‚Ä¢ An√°lisis de clientes importantes",
          "‚Ä¢ Productos destacados",
          "‚Ä¢ Inventario en tr√°nsito",
          "‚Ä¢ L√≠mites de cr√©dito disponibles",
          "‚Ä¢ Estado de cuenta de clientes",
          "",
          "¬øEn qu√© puedo ayudarte hoy? Puedes preguntarme directamente lo que necesites.",
        ].join("\n")
      );
    } else {
      // Reiniciar la bandera para futuras conversaciones si el usuario escribe expl√≠citamente "menu"
      if (
        ctx.body.toLowerCase() === "menu" ||
        ctx.body.toLowerCase() === "men√∫"
      ) {
        await state.update({ welcomeShown: false });
        await typing(ctx, provider);
        await flowDynamic("¬øEn qu√© puedo ayudarte ahora?");
      }
    }
  })
  .addAnswer(
    "", // Mensaje vac√≠o ya que se manejar√° en el addAction
    {
      capture: true,
    },
    async (ctx, { flowDynamic, provider, gotoFlow, state }) => {
      // Evitar que el men√∫ intercepte mensajes cuando el usuario ya est√° en otro flujo esperando input
      const currentFlow = await state.get("currentFlow") || "menu";
      const esperandoInput = await state.get("esperandoInput");
      const esperandoSeleccionCliente = await state.get("esperandoSeleccionCliente");
      const esperandoEmpresaSeleccion = await state.get("esperandoEmpresaSeleccion");
      const blockedForOtherFlows = await state.get("blockedForOtherFlows");
      
      logDebug(`Procesando mensaje: "${ctx.body}", flujo actual: ${currentFlow}`);
      logDebug(`Estados: esperandoInput: ${esperandoInput}, esperandoSeleccionCliente: ${esperandoSeleccionCliente}, esperandoEmpresaSeleccion: ${esperandoEmpresaSeleccion}, bloqueado: ${blockedForOtherFlows}`);
      
      // Si cualquier flag indica que el mensaje debe ser procesado por otro flujo, lo ignoramos
      if (currentFlow !== "menu" || 
          esperandoInput === true || 
          esperandoSeleccionCliente === true || 
          esperandoEmpresaSeleccion === true || 
          blockedForOtherFlows === true) {
        logDebug(`IGNORANDO MENSAJE - Flujo ${currentFlow} bloqueado: ${!!blockedForOtherFlows}`);
        return; // Dejar que el flujo actual maneje el mensaje
      }

      await typing(ctx, provider);
      const userMessage = ctx.body.toLowerCase();

      // Casos espec√≠ficos para comandos directos
      if (
        userMessage === "salir" ||
        userMessage === "exit"
      ) {
        logDebug("Usuario solicit√≥ salir");
        await flowDynamic(
          "Gracias por usar el Asistente Comercial. ¬°Hasta pronto!"
        );
        return;
      }

      try {
        // Usar el geminiAgent para analizar la intenci√≥n del usuario
        logDebug(`Analizando intenci√≥n del mensaje: "${userMessage}"`);
        const intention = await geminiAgent.analyzeMainInput(userMessage);
        logDebug(`Intenci√≥n detectada: ${intention.flujo}`);
        
        // Si se detecta la necesidad de cambiar a un flujo espec√≠fico, establecer valores predeterminados
        if (intention.flujo !== "default") {
          await flowOrchestrator.setDefaultStateValues(intention.flujo, state);
        }
        
        // Usar el orquestador para manejar la navegaci√≥n entre flujos
        return await flowOrchestrator.routeToFlow(
          intention,
          ctx,
          { flowDynamic, provider, state, gotoFlow }
        );
      } catch (error) {
        logDebug(`Error al procesar solicitud: ${error}`);
        console.error("Error al procesar la solicitud con Gemini:", error);
        await flowDynamic(
          "Lo siento, estoy teniendo problemas para procesar tu solicitud en este momento. ¬øPodr√≠as intentarlo nuevamente o formular tu pregunta de otra manera?"
        );
      }
    }
  );
