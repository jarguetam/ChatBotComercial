import { addKeyword } from "@builderbot/bot";
import { BaileysProvider as Provider } from "@builderbot/provider-baileys";
import { MysqlAdapter as Database } from "@builderbot/database-mysql";
import { typing } from "../utils/presence";
import { geminiAgent } from "./geminiAgent";
import { flowOrchestrator } from "./flowOrchestrator";

export const menuFlow = addKeyword<Provider, Database>([
  "menu",
  "menÃº",
  "MENU",
  "MENÃš",
  "volver",
  "VOLVER",
  "hola",
  "ayuda",
  "help",
])
  .addAction(async (ctx, { flowDynamic, state, provider }) => {
    // Verificar si ya se mostrÃ³ un mensaje de bienvenida (viene de welcomeFlow)
    const welcomeShown = await state.get("welcomeShown");

    // Solo mostrar el mensaje de bienvenida si no viene de welcomeFlow
    if (!welcomeShown) {
      await typing(ctx, provider);
      await flowDynamic(
        [
          "ðŸ‘‹ *Â¡Bienvenido al Asistente Comercial Inteligente!*",
          "",
          "Soy tu asistente virtual y puedo ayudarte con informaciÃ³n sobre:",
          "",
          "â€¢ Metas mensuales",
          "â€¢ Datos de ventas recientes",
          "â€¢ AnÃ¡lisis de clientes importantes",
          "â€¢ Productos destacados",
          "â€¢ Inventario en trÃ¡nsito",
          "â€¢ LÃ­mites de crÃ©dito disponibles",
          "",
          "Â¿En quÃ© puedo ayudarte hoy? Puedes preguntarme directamente lo que necesites.",
        ].join("\n")
      );
    } else {
      // Reiniciar la bandera para futuras conversaciones si el usuario escribe explÃ­citamente "menu"
      if (
        ctx.body.toLowerCase() === "menu" ||
        ctx.body.toLowerCase() === "menÃº"
      ) {
        await state.update({ welcomeShown: false });
        await typing(ctx, provider);
        await flowDynamic("Â¿En quÃ© puedo ayudarte ahora?");
      }
    }
  })
  .addAnswer(
    "", // Mensaje vacÃ­o ya que se manejarÃ¡ en el addAction
    {
      capture: true,
    },
    async (ctx, { flowDynamic, provider, gotoFlow, state }) => {
      await typing(ctx, provider);
      const userMessage = ctx.body.toLowerCase();

      // Casos especÃ­ficos para comandos directos
      if (
        userMessage.toLowerCase() === "salir" ||
        userMessage.toLowerCase() === "exit"
      ) {
        await flowDynamic(
          "Gracias por usar el Asistente Comercial. Â¡Hasta pronto!"
        );
        return;
      }

      try {
        // Usar el geminiAgent para analizar la intenciÃ³n del usuario
        const intention = await geminiAgent.analyzeMainInput(userMessage);
        
        // Si se detecta la necesidad de cambiar a un flujo especÃ­fico, establecer valores predeterminados
        if (intention.flujo !== "default") {
          await flowOrchestrator.setDefaultStateValues(intention.flujo, state);
        }
        
        // Usar el orquestador para manejar la navegaciÃ³n entre flujos
        return await flowOrchestrator.routeToFlow(
          intention,
          ctx,
          { flowDynamic, provider, state, gotoFlow }
        );
      } catch (error) {
        console.error("Error al procesar la solicitud con Gemini:", error);
        await flowDynamic(
          "Lo siento, estoy teniendo problemas para procesar tu solicitud en este momento. Â¿PodrÃ­as intentarlo nuevamente o formular tu pregunta de otra manera?"
        );
      }
    }
  );
