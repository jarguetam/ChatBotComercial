import { addKeyword } from "@builderbot/bot";
import { BaileysProvider as Provider } from "@builderbot/provider-baileys";
import { MysqlAdapter as Database } from "@builderbot/database-mysql";
import {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} from "@google/generative-ai";
import { ApiService } from "../services/apiService";
import { typing } from "../utils/presence";
import { menuFlow } from "./menuFlow";

// Verificamos si tenemos configurado Gemini (lo usaremos para saludos personalizados)
const API_KEY = process.env.GEMINI_API_KEY;
let genAI = null;
if (API_KEY) {
  genAI = new GoogleGenerativeAI(API_KEY);
}

export const welcomeFlow = addKeyword<Provider, Database>([
  "hi",
  "hello",
  "hola",
  "buen d√≠a",
  "buenas",
  "buenos d√≠as",
  "buenas tardes",
  "buenas noches",
])
  .addAction(async (ctx, { flowDynamic, state, provider, gotoFlow }) => {
    await typing(ctx, provider);
    // Extraer el n√∫mero de tel√©fono del contexto
    const phone = ctx.from;
    console.log("N√∫mero de tel√©fono en welcomeFlow:", phone);

    try {
      // Validar si el n√∫mero est√° registrado
      const sellerData = await ApiService.validateSeller(phone);
      console.log("Datos del vendedor:", JSON.stringify(sellerData));

      if (sellerData) {
        // Verificar la estructura de datos del vendedor
        console.log("Estructura de sellerData:", Object.keys(sellerData));

        // Guardar la informaci√≥n del vendedor en el estado
        // Garantizamos que el c√≥digo se guarde correctamente
        const sellerCode =
          sellerData.code || sellerData.U_OS_CODIGO || sellerData.codigo;
        const sellerName =
          sellerData.name || sellerData.SlpName || sellerData.nombre;

        console.log(
          "Guardando en estado: c√≥digo:",
          sellerCode,
          "nombre:",
          sellerName
        );

        await state.update({
          isRegistered: true,
          sellerName: sellerName,
          sellerCode: sellerCode,
          welcomeShown: true // Indicador de que ya se mostr√≥ un mensaje de bienvenida
        });

        // Verificar que se haya guardado correctamente
        const storedCode = await state.get("sellerCode");
        console.log("C√≥digo almacenado en estado:", storedCode);

        // Si tenemos Gemini, generamos un saludo personalizado
        if (genAI) {
          const model = genAI.getGenerativeModel({
            model: "gemini-1.5-flash",
            generationConfig: {
              temperature: 0.7,
              maxOutputTokens: 256,
            }
          });

          const prompt = `Genera un saludo amigable, breve y profesional para un vendedor llamado ${sellerName}. 
          El saludo debe ser en espa√±ol, c√°lido pero profesional, y debe dar la bienvenida al sistema de informaci√≥n comercial. 
          Hazlo personal usando su nombre. No uses m√°s de 2 l√≠neas. No agregues opciones ni men√∫s.`;
          
          try {
            const result = await model.generateContent(prompt);
            const customGreeting = result.response.text().trim();
            await flowDynamic(customGreeting);
          } catch (error) {
            // Si falla Gemini, usamos el saludo predeterminado
            await flowDynamic(`¬°Hola ${sellerName}! üëã Bienvenido a tu Asistente Comercial. ¬øEn qu√© puedo ayudarte hoy?`);
          }
        } else {
          // Mensaje de bienvenida predeterminado si no hay Gemini
          await flowDynamic(`¬°Hola ${sellerName}! üëã Bienvenido a tu Asistente Comercial. ¬øEn qu√© puedo ayudarte hoy?`);
        }
      } else {
        // Actualizar estado como no registrado
        await state.update({ 
          isRegistered: false,
          welcomeShown: true // Indicador de que ya se mostr√≥ un mensaje de bienvenida
        });

        // Mensaje para n√∫mero no registrado
        await flowDynamic(
          "¬°Hola! Parece que tu n√∫mero no est√° registrado en nuestro sistema. Si eres un vendedor de Grupo Cadelga, por favor comun√≠cate al departamento de Data BI para activar tu acceso. üëã"
        );
        return;
      }

      // Mensaje informativo sobre las capacidades del asistente
      await flowDynamic([
        "Puedo ayudarte con informaci√≥n sobre:",
        "",
        "‚Ä¢ Metas mensuales y KPIs",
        "‚Ä¢ Datos de ventas recientes",
        "‚Ä¢ An√°lisis de clientes importantes",
        "‚Ä¢ Productos destacados",
        "‚Ä¢ Inventario en tr√°nsito",
        "‚Ä¢ L√≠mites de cr√©dito disponibles",
        "",
        "¬øQu√© informaci√≥n necesitas hoy? Puedes preguntarme directamente."
      ].join("\n"));

      // Dirigimos al flujo de men√∫ para continuar la conversaci√≥n
      return gotoFlow(menuFlow);

    } catch (error) {
      console.error("Error en welcomeFlow:", error);
      await flowDynamic(
        "¬°Hola! Estamos experimentando problemas t√©cnicos. Por favor, intenta m√°s tarde."
      );
    }
  }); 