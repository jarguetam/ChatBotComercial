import { addKeyword } from "@builderbot/bot";
import { BaileysProvider as Provider } from "@builderbot/provider-baileys";
import { MysqlAdapter as Database } from "@builderbot/database-mysql";
import { ApiService } from "../services/apiService";
import { typing } from "../utils/presence";
import { geminiAgent } from "./geminiAgent";
import { flowOrchestrator } from "./flowOrchestrator";

// Nombre del agente de datos
const AGENT_NAME = "DataBot";

export const welcomeFlow = addKeyword<Provider, Database>([
  "hi",
  "hello",
  "hola",
  "buen d√≠a",
  "buenas",
  "buenos d√≠as",
  "buenos dias",
  "buenas tardes",
  "buenas noches",
])
  .addAction(async (ctx, { flowDynamic, state, provider, gotoFlow }) => {
    await typing(ctx, provider);
    // Extraer el n√∫mero de tel√©fono del contexto
    const phone = ctx.from;
    console.log("N√∫mero de tel√©fono en welcomeFlow:", phone);

    try {
      // Validar si el n√∫mero est√° registrado
      const sellerData = await ApiService.validateSeller(phone);
      console.log("Datos del vendedor:", JSON.stringify(sellerData));

      if (sellerData) {
        // Verificar la estructura de datos del vendedor
        console.log("Estructura de sellerData:", Object.keys(sellerData));

        // Guardar la informaci√≥n del vendedor en el estado
        // Garantizamos que el c√≥digo se guarde correctamente
        const sellerCode =
          sellerData.code || sellerData.U_OS_CODIGO || sellerData.codigo;
        const sellerName =
          sellerData.name || sellerData.SlpName || sellerData.nombre;

        console.log(
          "Guardando en estado: c√≥digo:",
          sellerCode,
          "nombre:",
          sellerName
        );

        await state.update({
          isRegistered: true,
          sellerName: sellerName,
          sellerCode: sellerCode,
          welcomeShown: true, // Indicador de que ya se mostr√≥ un mensaje de bienvenida
          currentFlow: "menu"  // Establecer el flujo actual como men√∫
        });

        // Verificar que se haya guardado correctamente
        const storedCode = await state.get("sellerCode");
        console.log("C√≥digo almacenado en estado:", storedCode);

        // Utilizar el geminiAgent para generar un saludo personalizado
        try {
          const customGreeting = await geminiAgent.generateGreeting(sellerName);
          await flowDynamic(customGreeting);
        } catch (error) {
          // Si falla Gemini, usamos el saludo predeterminado
          await flowDynamic(`¬°Hola ${sellerName}! üëã Soy ${AGENT_NAME}, tu Asistente Comercial. ¬øEn qu√© puedo ayudarte hoy?`);
        }
      } else {
        // Actualizar estado como no registrado
        await state.update({ 
          isRegistered: false,
          welcomeShown: true // Indicador de que ya se mostr√≥ un mensaje de bienvenida
        });

        // Mensaje para n√∫mero no registrado
        await flowDynamic(
          "¬°Hola! Parece que tu n√∫mero no est√° registrado en nuestro sistema. Si eres un vendedor de Grupo Cadelga, por favor comun√≠cate al departamento de Data BI para activar tu acceso. üëã"
        );
        return;
      }

      // Mensaje informativo sobre las capacidades del asistente
      await flowDynamic([
        "Puedo ayudarte con informaci√≥n sobre:",
        "",
        "‚Ä¢ Meta del mes",
        "‚Ä¢ Datos de ventas recientes",
        "‚Ä¢ An√°lisis de clientes importantes",
        "‚Ä¢ Productos destacados",
        "‚Ä¢ Inventario en tr√°nsito",
        "‚Ä¢ L√≠mites de cr√©dito disponibles",
        "‚Ä¢ Estado de cuenta de clientes",
        "",
        "¬øQu√© informaci√≥n necesitas hoy? Puedes preguntarme directamente."
      ].join("\n"));

      // Dirigimos al flujo de men√∫ usando el orquestrador
      const intention = { flujo: "menu" };
      return await flowOrchestrator.routeToFlow(
        intention,
        ctx,
        { flowDynamic, provider, state, gotoFlow }
      );

    } catch (error) {
      console.error("Error en welcomeFlow:", error);
      await flowDynamic(
        "¬°Hola! Estamos experimentando problemas t√©cnicos. Por favor, intenta m√°s tarde."
      );
    }
  }); 