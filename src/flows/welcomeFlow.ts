import { addKeyword } from "@builderbot/bot";
import { BaileysProvider as Provider } from "@builderbot/provider-baileys";
import { MysqlAdapter as Database } from "@builderbot/database-mysql";
import { ApiService } from "../services/apiService";
import { typing } from "../utils/presence";

export const welcomeFlow = addKeyword<Provider, Database>([
  "hi",
  "hello",
  "hola",
  "buen d√≠a",
  "buenas",
  "buenos d√≠as",
  "buenas tardes",
  "buenas noches",
])
  .addAction(async (ctx, { flowDynamic, state, provider }) => {
    await typing(ctx, provider);
    // Extraer el n√∫mero de tel√©fono del contexto
    const phone = ctx.from;
    console.log("N√∫mero de tel√©fono en welcomeFlow:", phone);

    try {
      // Validar si el n√∫mero est√° registrado
      const sellerData = await ApiService.validateSeller(phone);
      console.log("Datos del vendedor:", JSON.stringify(sellerData));

      if (sellerData) {
        // Verificar la estructura de datos del vendedor
        console.log("Estructura de sellerData:", Object.keys(sellerData));

        // Guardar la informaci√≥n del vendedor en el estado
        // Garantizamos que el c√≥digo se guarde correctamente
        const sellerCode =
          sellerData.code || sellerData.U_OS_CODIGO || sellerData.codigo;
        const sellerName =
          sellerData.name || sellerData.SlpName || sellerData.nombre;

        console.log(
          "Guardando en estado: c√≥digo:",
          sellerCode,
          "nombre:",
          sellerName
        );

        await state.update({
          isRegistered: true,
          sellerName: sellerName,
          sellerCode: sellerCode,
        });

        // Verificar que se haya guardado correctamente
        const storedCode = await state.get("sellerCode");
        console.log("C√≥digo almacenado en estado:", storedCode);

        // Mensaje para vendedor registrado
        await flowDynamic(`Hola ${sellerName} üëã!   Es un gusto tenerte aqu√≠.`);
      } else {
        // Actualizar estado como no registrado
        await state.update({ isRegistered: false });

        // Mensaje para n√∫mero no registrado
        await flowDynamic(
          "¬°Hola que tal!   Parece que tu n√∫mero no est√° registrado. Si eres un vendedor de Grupo Cadelga, favor comun√≠cate al departamento de Data BI üëã"
        );
      }
    } catch (error) {
      console.error("Error en welcomeFlow:", error);
      await flowDynamic(
        "¬°Hola! Estamos experimentando problemas t√©cnicos. Por favor, intenta m√°s tarde."
      );
    }
  })
  .addAnswer(
    [
      "üëã *¬°Bienvenido al Sistema de Informaci√≥n Comercial!*",
      "",
      "Por favor, selecciona una opci√≥n:",
      "",
      "1Ô∏è‚É£ Meta mensual",
      "2Ô∏è‚É£ Ventas √∫ltimos 6 meses",
      "3Ô∏è‚É£ Top Clientes",
      "4Ô∏è‚É£ Top Productos",
      "5Ô∏è‚É£ Consultar inventario en transito",
      "6Ô∏è‚É£ Limites de credito disponibles",
      "",
      "Escribe el n√∫mero de la opci√≥n que deseas consultar.",
    ].join("\n"),
    {
      buttons: [
        { body: "1Ô∏è‚É£ Meta mensual" },
        { body: "2Ô∏è‚É£ Ventas √∫ltimos 6 meses" },
        { body: "3Ô∏è‚É£ Top Clientes" },
        { body: "4Ô∏è‚É£ Top Productos" },
        { body: "5Ô∏è‚É£ Consultar inventario en transito" },
        { body: "6Ô∏è‚É£ Limites de credito disponibles" },
      ],
      capture: true,
    }
  ); 