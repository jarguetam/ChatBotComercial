import { addKeyword } from "@builderbot/bot";
import { BaileysProvider as Provider } from "@builderbot/provider-baileys";
import { MysqlAdapter as Database } from "@builderbot/database-mysql";
import { ApiService } from "../services/apiService";
import { typing } from "../utils/presence";
import fs from 'fs';
import path from 'path';
import os from 'os';

export const limitesCreditoFlow = addKeyword<Provider, Database>([
  "6",
  "6Ô∏è‚É£",
  "6Ô∏è‚É£ Limites de credito disponibles",
  "Limites de credito disponibles",
])
  .addAction(async (ctx, { flowDynamic, provider }) => {
    await typing(ctx, provider);

    // Primero validamos al vendedor
    const phone = ctx.from;
    console.log("N√∫mero de tel√©fono en limitesCreditoFlow:", phone);

    try {
      const sellerData = await ApiService.validateSeller(phone);
      if (!sellerData) {
        await flowDynamic(
          "‚ùå No se pudo identificar tu informaci√≥n de vendedor. Por favor, intenta m√°s tarde."
        );
        // Mensaje final
        await typing(ctx, provider);
        await flowDynamic(
          "¬øDeseas ver otra informaci√≥n? Escribe *menu* para volver al men√∫ principal."
        );
        return;
      }

      const sellerCode =
        sellerData.code || sellerData.U_OS_CODIGO || sellerData.codigo;
      console.log("C√≥digo del vendedor obtenido:", sellerCode);

      // Mostrar opciones para seleccionar empresa
      await flowDynamic(
        [
          "üìä *CONSULTA DE L√çMITES DE CR√âDITO*",
          "",
          "Selecciona la empresa para consultar los l√≠mites de cr√©dito disponibles:",
          "",
          "F Fertica",
          "C Cadelga",
          "",
          "Env√≠a la letra correspondiente.",
        ].join("\n")
      );

      // Guardar el c√≥digo del vendedor para usarlo despu√©s
      ctx.vendorCode = sellerCode;
    } catch (error) {
      console.error("Error en limitesCreditoFlow:", error);
      await flowDynamic(
        "‚ùå Hubo un error al procesar tu solicitud. Intenta m√°s tarde."
      );
      // Mensaje final
      await typing(ctx, provider);
      await flowDynamic(
        "¬øDeseas ver otra informaci√≥n? Escribe *menu* para volver al men√∫ principal."
      );
    }
  })
  .addAnswer(
    "Selecciona la empresa",
    { capture: true },
    async (ctx, { flowDynamic, provider }) => {
      await typing(ctx, provider);
      const respuesta = ctx.body.toLowerCase().trim();
      let empresa = "";

      // Utilizar n√∫meros en lugar de letras para diferenciar del otro flujo
      if (respuesta === "F" || respuesta === "f" || respuesta === "fertica") {
        empresa = "Fertica";
      } else if (
        respuesta === "C" ||
        respuesta === "c" ||
        respuesta === "cadelga"
      ) {
        empresa = "Cadelga";
      } else {
        await flowDynamic(
          "‚ùå Opci√≥n no v√°lida. Por favor escribe F para Fertica o C para Cadelga."
        );
        // Mensaje final
        await typing(ctx, provider);
        await flowDynamic(
          "¬øDeseas ver otra informaci√≥n? Escribe *menu* para volver al men√∫ principal."
        );
        return;
      }

      try {
        const phone = ctx.from;
        // Recuperar el c√≥digo del vendedor guardado anteriormente
        const sellerData = await ApiService.validateSeller(phone);
        const sellerCode =
          sellerData.code || sellerData.U_OS_CODIGO || sellerData.codigo;
        console.log("C√≥digo del vendedor obtenido:", sellerCode);
        // Consultar los l√≠mites de cr√©dito
        await flowDynamic(
          `‚è≥ Consultando l√≠mites de cr√©dito para ${empresa}...`
        );
        const creditLimitData = await ApiService.getCreditLimit(
          sellerCode,
          empresa
        );

        if (
          creditLimitData &&
          creditLimitData.success &&
          creditLimitData.base64Content
        ) {
          try {
            // Crear una carpeta para guardar el PDF temporalmente
            const tempDir = path.join(process.cwd(), 'temp');
            if (!fs.existsSync(tempDir)) {
              fs.mkdirSync(tempDir, { recursive: true });
            }
            
            // Crear un nombre de archivo √∫nico
            const fileName = `LimitesCredito_${empresa}_${Date.now()}.pdf`;
            const filePath = path.join(tempDir, fileName);
            
            // Guardar el PDF en el sistema de archivos
            fs.writeFileSync(filePath, Buffer.from(creditLimitData.base64Content, 'base64'));
            
            // Mensaje informativo
            await flowDynamic(
              `üìÑ *L√≠mites de cr√©dito disponibles - ${empresa}*\n\nAqu√≠ tienes el reporte con los l√≠mites de cr√©dito actualizados para tus clientes.`
            );
            
            // Enviar el PDF usando flowDynamic con la ruta local
            await flowDynamic([
              {
                body: `L√≠mites de cr√©dito para ${empresa}`,
                media: filePath
              }
            ]);
            
            // Eliminar el archivo despu√©s de enviarlo (opcional)
            setTimeout(() => {
              try {
                fs.unlinkSync(filePath);
                console.log(`Archivo temporal eliminado: ${filePath}`);
              } catch (err) {
                console.error(`Error al eliminar archivo temporal: ${err}`);
              }
            }, 5000); // 5 segundos de retraso para asegurarse que se haya enviado
            
          } catch (error) {
            console.error("Error enviando PDF:", error);
            await flowDynamic("‚ùå Error al enviar el documento PDF. Intenta m√°s tarde.");
          }
        } else {
          await flowDynamic(
            `‚ùå No se encontraron datos de l√≠mites de cr√©dito para ${empresa}. Intenta m√°s tarde.`
          );
        }
      } catch (error) {
        console.error(
          `Error consultando l√≠mites de cr√©dito para ${empresa}:`,
          error
        );
        await flowDynamic(
          "‚ùå Hubo un error al obtener los l√≠mites de cr√©dito. Intenta m√°s tarde."
        );
      }

      // Mensaje final
      await typing(ctx, provider);
      await flowDynamic(
        "¬øDeseas ver otra informaci√≥n? Escribe *menu* para volver al men√∫ principal."
      );
    }
  );
